# encoding: utf-8
# 2021 R2
SetScriptVersion(Version="21.2.209")
template1 = GetTemplate(TemplateName="Geometry")
system1 = template1.CreateSystem()
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath=GetAbsoluteUserPathName("dissertacao_cases/Geom1.scdoc"))
template2 = GetTemplate(TemplateName="FLTG")
system2 = template2.CreateSystem(
    Position="Right",
    RelativeTo=system1)
geometryComponent1 = system1.GetComponent(Name="Geometry")
meshComponent1 = system2.GetComponent(Name="Mesh")
geometryComponent1.TransferData(TargetComponent=meshComponent1)
setup1 = system2.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(EnvPath={}, RunParallel=True))
tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=1))
mesh1 = system2.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1.Refresh()
setup1.SendCommand(Command='/file/set-tui-version "21.2"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildToTask()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.setState({r'SetupType': r'The geometry consists of only fluid regions with no voids',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=True)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.setState({r'InvokeShareTopology': r'Yes',r'SetupType': r'The geometry consists of only fluid regions with no voids',r'WallToInternal': r'Yes',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.setState({r'InvokeShareTopology': r'No',r'SetupType': r'The geometry consists of only fluid regions with no voids',r'WallToInternal': r'Yes',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.setState({r'AddChild': r'no',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].AddChildToTask()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.setState({r'VolumeFill': r'hexcore',r'VolumeMeshPreferences': {r'MergeBodyLabels': r'yes',r'ShowVolumeMeshPreferences': True,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-set-camera-relative '(205.201 187.687 -681.307) '(0 0 0) '(-0.0856811 -0.107537 -0.0454304) 0 0)(cx-use-window-id 51)(handle-key \"control [\")(cx-use-window-id 51)(cx-set-camera-relative '(-1432.74 749.387 -110.504) '(0 0 0) '(-0.0936473 -0.24803 -0.0987231) 0 0)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Revert()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.setState({r'VolumeFill': r'poly-hexcore',r'VolumeMeshPreferences': {r'MergeBodyLabels': r'yes',r'ShowVolumeMeshPreferences': True,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(cx-use-window-id 51)(handle-key \"control ??\")(cx-use-window-id 51)(dolly-camera -460.35 207.485 0)(cx-use-window-id 51)(cx-set-camera-relative '(2287.23 -450.762 -3348.2) '(0 0 0) '(0.0739725 -0.0786263 -0.150781) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-3542.41 568.758 2236.4) '(0 0 0) '(0.0825031 -0.0426554 -0.0832537) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-641.277 1003.52 -2879.61) '(0 0 0) '(0.0379624 -0.606352 -0.217921) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(-972.889 -274.842 415.911) '(0 0 0) '(0.0242314 0.0307056 -0.00760692) 0 0)(cx-use-window-id 51)(cx-set-camera-relative '(1298.77 169.572 -478.402) '(0 0 0) '(0.043314 -0.0394232 -0.0112646) 0 0)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*ReportMenu*Quality Measure...")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton3(Apply)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*ReportMenu*Quality Measure...")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Quality Measure*ToggleBox1(Measure)*Skewness" #t)(cx-gui-do cx-activate-item "Quality Measure*ToggleBox1(Measure)*Skewness")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton3(Apply)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton3(Apply)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PlotSubMenu*Cell Distribution...")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Cell Distribution*Table1*Frame1*PushButton2(Quality Measure)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton3(Apply)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Quality Measure*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Cell Distribution*PanelButtons*PushButton5(Compute)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Cell Distribution*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"MenuBar*ExportSubMenu*Mesh...\")(cx-gui-do cx-set-file-dialog-entries \"Select File\" '( \"C:/Users/luizf/Documents/Geom1.msh.h5\") \"CFF Mesh Files (*.msh.h5 )\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Solution)*PushButton1(Switch to Solution)")(cx-gui-do cx-activate-item "Question*OK")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Workbench Tools*fl_mesh_generation")')
Save(Overwrite=True)
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Workbench Tools*fl_mesh_generation")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*ExportSubMenu*Boundary Mesh...")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|General"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
Save(Overwrite=True)
